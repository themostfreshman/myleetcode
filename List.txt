1.11 乘最多水的容器
	最开始的想法是 数组嘛，遍历就完事了，每个元素当key，判断当前key的最大值。。brute force
	双指针的核心是如何移动指针，也就是状态的剪枝，动谁呢，动小的那边，面积才有可能增大，
	s[i,j] 假设h[i]<h[j]，那么s[i+1,j] 一定大于s[i,j-1]、s[i,j-2]...s[i,i+1]。。因为容量只与短边有关
	SO...
	public int maxArea(int[] height) {
        int i = 0, j = height.length - 1, res = 0;
        while(i < j){
            res = height[i] < height[j] ? 
                Math.max(res, (j - i) * height[i++]): 
                Math.max(res, (j - i) * height[j--]); 
        }
        return res;
    }
	
2.26删除重复元素
	最开始的想法：遍历咯，用idx来标识放置的位置
	正儿八经的说还是双指针，i来标记放置的位置，j进行遍历
	public int removeDuplicates(int[] nums) {
		if (nums.length == 0) return 0;
		int i = 0;
		for (int j = 1; j < nums.length; j++) {
			if (nums[j] != nums[i]) {
				i++;
				nums[i] = nums[j];
			}
		}
		return i + 1;
	}
	
3.27移除元素
	还是双指针，快慢指针，i位置，j遍历
	public int removeElement(int[] nums, int val) {
		int i = 0;
		for (int j = 0; j < nums.length; j++) {
			if (nums[j] != val) {
				nums[i] = nums[j];
				i++;
			}
		}
		return i;
	}
	当删除元素较少时，没必要每个都进行copy的工作，采用交换的方式，与数组末尾进行交换，同时数组大小减一，这样子
	public int removeElement(int[] nums, int val) {
		int i = 0;
		int n = nums.length;
		while (i < n) {
			if (nums[i] == val) {
				nums[i] = nums[n - 1];
				// reduce array size by one
				n--;
			} else {
				i++;
			}
		}
		return n;
	}
	
4.下一个排列
	不管前面的数组是怎么样的，我们的核心是去找反过来的对号的形状，1 2 7 4 3 1，这种结构的，找到最后一个这种结构，确定 2  3的位置，交换，
	因为我们找到这种结构就保证了7之后一定是降序序列，下一个序列一定是增序，因此 2之后的元素反转
	public void nextPermutation(int[] nums) {
        if (nums == null || nums.length == 0) return;
        int firstIndex = -1;
		//貌似也只能倒过来找
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                firstIndex = i;
                break;
            }
        }
		//没有这种结构，说明完全降序，也就是最大序列，反过来就行
        if (firstIndex == -1) {
            reverse(nums, 0, nums.length - 1);
            return;
        }
        int secondIndex = -1;
		//找到3的位置，也就是最后一个大于2的元素，
        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[i] > nums[firstIndex]) {
                secondIndex = i;
                break;
            }
        }
		//交换后仍能保证2之后是降序排列
        swap(nums, firstIndex, secondIndex);
		//反转为升序即可
        reverse(nums, firstIndex + 1, nums.length - 1);
        return;

    }

    private void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i++, j--);
        }
    }

    private void swap(int[] nums, int i, int i1) {
        int tmp = nums[i];
        nums[i] = nums[i1];
        nums[i1] = tmp;
    }


5.53 最大子序和
	找到具有最大和的连续子数组，并返回最大值
	1.暴力法，以当前元素为起点，找到对应的最大和
	2.动态规划，dp[i]表示以当前元素结尾的最大和，dp[i] = dp[i-1]>0?dp[i-1]+nums[i]:nums[i]
	public int maxSubArray(int[] nums) {
		//因为仅与前一个元素相关，因此使用sum来代替dp数组
		Integer sum = 0;
		Integer ans = nums[0];
		for(int num:nums){
			if(sum>0){
				sum+=num;
			}
			else{
				sum = num;
			}
			ans = Math.max(sum,ans);
		}
		return ans;
    }

6.54 螺旋矩阵
	m*n的矩阵，顺时针螺旋遍历
	上下左右的边界法，我们遍历过了就更新边界，一圈一圈来，更新边界时出现交叉，那么就结束  还是边写注释边写代码比较好。。。左右不分。。。
	public List<Integer> spiralOrder(int[][] matrix) {
		ArrayList<Integer> list = new ArrayList();
		if(matrix == null || matrix.length==0) return list;
		int u = 0;
		int d = matrix.length-1;
		int l = 0;
		int r = matrix[0].length-1;
		
		while(true){
			//右
			for(int i=l;i<=r;i++) list.add(matrix[u][i]);
			//更新边界，判断交叉
			if(++u > d) break;
			//下
			for(int i=u;i<=d;i++) list.add(matrix[i][r]);
			//更新右边界
			if(--r <l) break;
			//左
			for(int i=r;i>=l;i--) list.add(matrix[d][i]);
			//更新下边界
			if(--d <u) break;
			//上
			for(int i=d;i>=u;i--) list.add(matrix[i][l]);
			//更新左边界
			if(++l > r) break;
		}
		return list;
        
    }
	
7.55跳跃游戏
	之前做过2，要求的是跳跃的最小次数，这次是判断能不能到
	思路一样，判断当前点所能到达的最大边界，并判断边界内的各点所能到达的最远距离，然后更新边界
	public boolean canJump(int[] nums) {
		int end=0;
		for(int i=0;i<nums.length;i++){
			if(i>end) return false;
			end = Math.max(end,nums[i]+i);
		}
		return true;     
    }
	
	
8.56合并区间
	传入的参数数组是么的顺序的，因此需要以各元素的首元素进行排序，排完序然后呢，合并，[a,b] [c,d] 当b>c时需要合并，咋合并呢，左边界a确定，右边界为max(b,d)
	    public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        if (intervals.length == 0 || intervals == null) return res.toArray(new int[0][]);
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int i = 0;
        while (i < intervals.length) {
            int left = intervals[i][0];
            int right = intervals[i][1];
            while (i < intervals.length - 1 && intervals[i + 1][0] <= right) {
                i++;
                right = Math.max(right, intervals[i][1]);
            }
            res.add(new int[]{left, right});
            i++;
        }
        return res.toArray(new int[0][]);
    }
	需要注意的地方
	1.return res.toArray(new int[0][]);  参数意味着不指定行、行自动填充，如果为new int[4][], 即使结果为[[1,6],[8,10],[15,18]]， 也会强制输出[[1,6],[8,10],[15,18],null]，即不足行null补充
	2.Arrays.sort(intervals, (a, b) -> a[0] - b[0]);  lambda表达式写的comparator对象
	
9.57 插入区间  其实和56蛮像的，  先把插入区间的左半部分扔进结果数组([a,b] [c,d] c>b)  ,然后存在合并的情况([a,b],[c,d] b>c)，如果合并，使用合并的区间继续判断(使用temp数组来完成)
	之后把左边的区间扔进结果数组
	public int[][] insert(int[][] intervals, int[] newInterval) {
       List<int[]> res = new ArrayList<>();
        int i = 0;
		//左
        while (i < intervals.length && newInterval[0] > intervals[i][1]) {
            res.add(intervals[i]);
            i++;
        }
		//合并
        int[] tmp = new int[]{newInterval[0], newInterval[1]};
        while (i < intervals.length && newInterval[1] >= intervals[i][0]) {
            tmp[0] = Math.min(tmp[0], intervals[i][0]);
            tmp[1] = Math.max(tmp[1], intervals[i][1]);
            i++;
        }
        res.add(tmp);
		//右
        while (i < intervals.length) {
            res.add(intervals[i]);
            i++;
        }
        return res.toArray(new int[0][]); 
    }
	
	
10.59 螺旋矩阵2 和54很像，采取预设的边界进行模拟
    public int[][] generateMatrix(int n) {
        int l = 0, r = n - 1, t = 0, b = n - 1;
        int[][] mat = new int[n][n];
        int num = 1, tar = n * n;
        while(num <= tar){
            for(int i = l; i <= r; i++) mat[t][i] = num++; // left to right.
            t++;
            for(int i = t; i <= b; i++) mat[i][r] = num++; // top to bottom.
            r--;
            for(int i = r; i >= l; i--) mat[b][i] = num++; // right to left.
            b--;
            for(int i = b; i >= t; i--) mat[i][l] = num++; // bottom to top.
            l++;
        }
        return mat;
    }

11.62.不同路径 
	典型的动态规划题。。。好牛逼啊。。。。
	1.组合数学，机器人从start 到 end 总共要走 m-1+n-1=m+n-2步，然后呢，c(m-1,m+n-2)就完事了
	2.动态规划  dp[i][j]为到达当前位置所有的路径 dp[i][j]=dp[i-1][j]+dp[i][j-1]  i==0||j==0时dp=1;
		public int uniquePaths(int m, int n) {
			int[][] dp = new int[m][n];        
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (i == 0 || j == 0)
						dp[i][j] = 1;
					else {
						dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
					}
				}
			}
			return dp[m - 1][n - 1];        
		}
	2.1优化空间
		dp仅与当前行与前一行相关，so
		    public int uniquePaths(int m, int n) {
        int[] pre = new int[n];
        int[] cur = new int[n];
        Arrays.fill(pre, 1);
        Arrays.fill(cur,1);
        for (int i = 1; i < m;i++){
            for (int j = 1; j < n; j++){
                cur[j] = cur[j-1] + pre[j];
            }
            pre = cur.clone();
        }
        return pre[n-1]; 
    }
	2.2进一步优化，cur本身就存有前一行的数值，因此cur[j]=cur[j-1]+cur[j]
	public int uniquePaths(int m, int n) {
        int[] cur = new int[n];
        Arrays.fill(cur,1);
        for (int i = 1; i < m;i++){
            for (int j = 1; j < n; j++){
                cur[j] += cur[j-1] ;
            }
        }
        return cur[n-1];
    }

12.63.不同路径2
	与上题相比增加了障碍，因此需要对第一行和第一列做特殊判断，而从[1,1]开始，如上，遇到1 dp为0即可   这里把原数组作为dp数组
	    public int uniquePathsWithObstacles(int[][] obstacleGrid) {

        int R = obstacleGrid.length;
        int C = obstacleGrid[0].length;

        // If the starting cell has an obstacle, then simply return as there would be
        // no paths to the destination.
        if (obstacleGrid[0][0] == 1) {
            return 0;
        }

        // Number of ways of reaching the starting cell = 1.
        obstacleGrid[0][0] = 1;

        // Filling the values for the first column
        for (int i = 1; i < R; i++) {
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i - 1][0] == 1) ? 1 : 0;
        }

        // Filling the values for the first row
        for (int i = 1; i < C; i++) {
            obstacleGrid[0][i] = (obstacleGrid[0][i] == 0 && obstacleGrid[0][i - 1] == 1) ? 1 : 0;
        }

        // Starting from cell(1,1) fill up the values
        // No. of ways of reaching cell[i][j] = cell[i - 1][j] + cell[i][j - 1]
        // i.e. From above and left.
        for (int i = 1; i < R; i++) {
            for (int j = 1; j < C; j++) {
                if (obstacleGrid[i][j] == 0) {
                    obstacleGrid[i][j] = obstacleGrid[i - 1][j] + obstacleGrid[i][j - 1];
                } else {
                    obstacleGrid[i][j] = 0;
                }
            }
        }

        // Return value stored in rightmost bottommost cell. That is the destination.
        return obstacleGrid[R - 1][C - 1];
    }
	
	同样可以使用上面的优化方法对该题进行优化  dp的取值原因
	这里没有对第一行进行单独判断，因为第一行除[1,1]外初始化为0，dp[j]+=dp[j-1],第一个1出现后可以保证后面全为0。
	第一列的话，就使用上一列的数值即可。
	public int uniquePathsWithObstacles(int[][] grid) {
        int[] dp = new int[grid[0].length];
        dp[0]=1;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    dp[j]=0;
                    continue;
                }
                if(j>0)
                    dp[j]+=dp[j-1];
            }
        }
        return dp[dp.length-1];
    }
13.64.最小路径和
	还是标准的动态规划解法，改改上面的代码就好
	空间优化好像不行
	public int minPathSum(int[][] grid) {
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(i == 0 && j == 0) continue;
                else if(i == 0)  grid[i][j] = grid[i][j - 1] + grid[i][j];
                else if(j == 0)  grid[i][j] = grid[i - 1][j] + grid[i][j];
                else grid[i][j] = Math.min(grid[i - 1][j], grid[i][j - 1]) + grid[i][j];
            }
        }
        return grid[grid.length - 1][grid[0].length - 1];
    }
	
14.66.加一
	看清楚题哈，返回的还是数组，那么就倒着来，如果产生进位，就继续，如果遍历完还在产生进位，那就说明是999的情况，最后直接给个1000就可以了  length+1，首位赋1
	public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            digits[i]++;
            digits[i] = digits[i] % 10;
            if (digits[i] != 0) return digits;
        }
        digits = new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
	
15.矩阵置零
	么的意思  两次遍历。第一次找行列，第二次置零 
	public void setZeroes(int[][] matrix) {
        Set<Integer> row_zero = new HashSet<>();
        Set<Integer> col_zero = new HashSet<>();
        int row = matrix.length;
        int col = matrix[0].length;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (matrix[i][j] == 0) {
                    row_zero.add(i);
                    col_zero.add(j);
                }
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (row_zero.contains(i) || col_zero.contains(j)) matrix[i][j] = 0;
            }
        }  
    }
	
	不过这里的要求是空间复杂度o(1)，所以上面的并不符合
	那么我们使用第一行与第一列来作为标记位，这样的话需要提前判断第一行与第一列是否包含零，最后再清空一下
	public void setZeroes(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        boolean row0_flag = false;
        boolean col0_flag = false;
        // 第一行是否有零
        for (int j = 0; j < col; j++) {
            if (matrix[0][j] == 0) {
                row0_flag = true;
                break;
            }
        }
        // 第一列是否有零
        for (int i = 0; i < row; i++) {
            if (matrix[i][0] == 0) {
                col0_flag = true;
                break;
            }
        }
        // 把第一行第一列作为标志位
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                if (matrix[i][j] == 0) {
                    matrix[i][0] = matrix[0][j] = 0;
                }
            }
        }
        // 置0
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }
        if (row0_flag) {
            for (int j = 0; j < col; j++) {
                matrix[0][j] = 0;
            }
        }
        if (col0_flag) {
            for (int i = 0; i < row; i++) {
                matrix[i][0] = 0;
            }
        } 
    }

16.74.搜索二维数组
	因为完全有序的特性，这里我们转为一维数组并使用二分法来查找
		1.咋转一维数组呢，一维数组共有row*col个数组，那么一维数组的元素坐标j转为二维数组则为[j/col][j%col]
		2.二分法，这里搜索区间定位[0,row*col）左闭右开，if(mid<target) left=mid+1;else right=mid;	
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) return false;
        int row = matrix.length;
        int col = matrix[0].length;
        int left = 0;
        int right = row * col;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (matrix[mid / col][mid % col] < target) left = mid + 1;
            else right = mid;
        }
        return (left < row * col && matrix[left / col][left % col] == target); 
    }
17.75颜色分类 
	按题目的意思就是排序
	1.遍历一遍数组，找到有几个0 几个1 几个2 然后改就完事了
	2.遍历一遍数组，0就放前面，2就放后面，1不用管，就完事了  代码写的很烂。。。。。
	public void sortColors(int[] nums) {
        int i = 0;
        while(i < nums.length && nums[i]==0) i++;
        int j = nums.length-1;
        while(j >=0 && nums[j]==2) j--;
        for(int k = i; k <=j&&i<=j;k++){
            if(nums[k]==0){
                int temp = nums[k];
                nums[k] = nums[i];
                nums[i++] = temp;
                while(i < nums.length &&nums[i]==0) i++;
                k=i;
            }
            else if(nums[k]==2){
                int temp = nums[k];
                nums[k] = nums[j];
                nums[j--] = temp;
                while(j >=0 &&nums[j]==2) j--;
            }
            if(nums[k]==0 || nums[k]==2) k--;
        }
    }
	优化的代码
	//用while会好很多
	 public void sortColors(int[] nums) {
        int len = nums.length;
        if (len < 2) {
            return;
        }

        // all in [0, zero) = 0
        // all in [zero, i) = 1
        // all in [two, len - 1] = 2

        // 循环终止条件是 i == two，那么循环可以继续的条件是 i < two

        // 为了保证初始化的时候 [0, zero) 为空，设置 zero = 0，
        // 所以下面遍历到 0 的时候，先交换，再加
        int zero = 0;

        // 为了保证初始化的时候 [two, len - 1] 为空，设置 two = len
        // 所以下面遍历到 2 的时候，先减，再交换
        int two = len;

        int i = 0;

        // 当 i == two 上面的三个子区间正好覆盖了全部数组
        // 因此，循环可以继续的条件是 i < two

        while (i < two) {
            if (nums[i] == 0) {
                swap(nums, i, zero);
                zero++;
                i++;
            } else if (nums[i] == 1) {
                i++;
            } else {
                two--;
                swap(nums, i, two);
            }
        }
    }

    private void swap(int[] nums, int index1, int index2) {
        int temp = nums[index1];
        nums[index1] = nums[index2];
        nums[index2] = temp;
    }
18.78.子集
	两种方法1.迭代 2.递归
	1.遍历数组，单个加入，遍历结果list，每个list添加当前元素
	public static List<List<Integer>> enumerate(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        res.add(new ArrayList<Integer>());
        for (Integer n : nums) {
            int size = res.size();
            for (int i = 0; i < size; i++) {
                List<Integer> newSub = new ArrayList<Integer>(res.get(i));
                newSub.add(n);
                res.add(newSub);
            }
        }
        return res;
    }
	2.递归（回溯）
	class Solution {
		public List<List<Integer>> subsets(int[] nums) {
			//1.第一步是声明结果list
			List<List<Integer>> res = new ArrayList<>();
			//第二步来规定处理函数，一般为  int start  根据结果list得到的List<Integer>参数，以及主函数的参数nums，res可以声明为全局变量从而从参数中移除
			backtrack(0, nums, res, new ArrayList<Integer>());
			return res;

		}

		private void backtrack(int i, int[] nums, List<List<Integer>> res, ArrayList<Integer> tmp) {
		//3.第三步是表明递归的出口，这里么的出口，直接将tmp加入即可
			res.add(new ArrayList<>(tmp));
		//4.第四步根据题意遍历nums   添加元素，处理，移除添加的元素然后继续遍历
			for (int j = i; j < nums.length; j++) {
				tmp.add(nums[j]);
				backtrack(j + 1, nums, res, tmp);
				tmp.remove(tmp.size() - 1);
			}
		}
}

19.88.合并有序数组  双指针即可
  public void merge(int[] nums1, int m, int[] nums2, int n) {
    // Make a copy of nums1.
    int [] nums1_copy = new int[m];
    System.arraycopy(nums1, 0, nums1_copy, 0, m);

    // Two get pointers for nums1_copy and nums2.
    int p1 = 0;
    int p2 = 0;

    // Set pointer for nums1
    int p = 0;

    // Compare elements from nums1_copy and nums2
    // and add the smallest one into nums1.
    while ((p1 < m) && (p2 < n))
      nums1[p++] = (nums1_copy[p1] < nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];

    // if there are still elements to add
    if (p1 < m)
      System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - p1 - p2);
    if (p2 < n)
      System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - p1 - p2);
  }
  public static void arraycopy(Object src,
                             int srcPos,
                             Object dest,
                             int destPos,
                             int length)
  将指定源数组中的数组从指定位置复制到目标数组的指定位置
  
  
20.79 单词搜索
	回溯法，找到第一个，然后上下左右试，不行就回退即可。
	char[][] board;
	String word;
    int m,n;
    boolean[][] mask;
    int[][] direction = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
	public boolean exist(char[][] board, String word) {
		if(board == null || board.length==0)
			return false;
		m = board.length;
		n = board[0].length;
		this.board = board;
		this.word = word;
		mask = new boolean[m][n];		
		//开始遍历
		for(int i = 0;i<m;i++){
			for(int j=0;j<n;j++){
				if(dfs(i,j,0)){
					return true;
				}
			}
		}
        return false;
    }
	
	private boolean dfs(int i,int j,int start){
		//第一步 确定出口，出口有两个，一个是ok，也就是存在结果，start为最后一个，而且当前i j相等且符合
		if(!mask[i][j] && start == word.length()-1)
			return board[i][j] == word.charAt(start);
		//第二个出口即为 当前元素用过/不等于start
		if(!mask[i][j] && board[i][j] == word.charAt(start)){
			mask[i][j] = true;
			//上下左右依次遍历
			for(int k=0;k<4;k++){
				int newX = i + direction[k][0];
				int newY = j + direction[k][1];
				if(inArea(newX,newY) && dfs(newX,newY,start+1)){
					return true;
				}				
			}
			mask[i][j] = false;
		}
		return false;
	}
	boolean inArea(int x,int y){
		return x>=0 && y>=0 && x<m && y<n;
	}
	
21.80删除排序数组中的重复项
	双指针，一个遍历，一个确定位置，只需判断nums[i]==nums[i-2]即可，如果等于，说明多了，过就是了，不等于，就nums[pos] = nums[i]
	public int removeDuplicates(int[] nums) {
        int i = 0;
        for (int n : nums){
            if (i < 2 || n != nums[i-2]){
                nums[i] = n;
                i++;
            }
        }
        return i;
    }
	
22.81 搜索旋转排序数组2
	比之1增加了重复的元素,需要注意的一点是旋转点的左边一定是大于右边的，以为本身是升序
	因此会出现nums[mid]==nums[left]的情况，这时候left++,right--即可
	剩下的二分判断就行
	public boolean search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int start = 0;
        int end = nums.length - 1;
        int mid;
        while (start <= end) {
            mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return true;
            }
            if (nums[start] == nums[mid]) {
                start++;
                continue;
            }
            //前半部分有序
            if (nums[start] < nums[mid]) {
                //target在前半部分
                if (nums[mid] > target && nums[start] <= target) {
                    end = mid - 1;
                } else {  //否则，去后半部分找
                    start = mid + 1;
                }
            } else {
                //后半部分有序
                //target在后半部分
                if (nums[mid] < target && nums[end] >= target) {
                    start = mid + 1;
                } else {  //否则，去后半部分找
                    end = mid - 1;

                }
            }
        }
        //一直没找到，返回false
        return false;

    }
23.84柱状图中的最大矩形
	核心思想是 以第i根柱子为最矮柱子所能延伸的最大面积。。。这样目标转化为从左右边找到第一个小于当前高度的元素 
	面积为  (right-left-1)*heights[i]
	
	1.就是暴力法，对每个元素左右遍历，找到计算即可，会超时
	2.计算left right的时候可以使用动态规划来完成，算是动态规划吧。。。if(heights[i]<=heights[i-]),那么再判断heights[i]<=heights[left[i-1]]，类推，找到left right 数组，然后遍历数组计算
	public int largestRectangleArea(int[] heights) {
        if (heights == null || heights.length == 0) return 0;
        int n = heights.length;
        int[] left_i = new int[n];
        int[] right_i = new int[n];
        left_i[0] = -1;
        right_i[n - 1] = n;
        int res = 0;
        for (int i = 1; i < n; i++) {
            int tmp = i - 1;
            while (tmp >= 0 && heights[tmp] >= heights[i]) tmp = left_i[tmp];
            left_i[i] = tmp;
        }
        for (int i = n - 2; i >= 0; i--) {
            int tmp = i + 1;
            while (tmp < n && heights[tmp] >= heights[i]) tmp = right_i[tmp];
            right_i[i] = tmp;
        }
        for (int i = 0; i < n; i++) res = Math.max(res, (right_i[i] - left_i[i] - 1) * heights[i]);
        return res;  
    }
	3.使用单调栈来完成，维护一个单调递增的栈，当出现nums[i]小于栈顶元素，说明栈顶元素的左右边界确定，出栈计算即可
	这里有一个问题是数组单调递增怎么办，我们在数组的两端分别插入0，这样保证第一个元素的计算，以及最后栈内元素的计算
	public int largestRectangleArea(int[] heights) {
        int res = 0;
        Deque<Integer> stack = new ArrayDeque<>();
        int[] new_heights = new int[heights.length + 2];
        for (int i = 1; i < heights.length + 1; i++) new_heights[i] = heights[i - 1];
        //System.out.println(Arrays.toString(new_heights));
        for (int i = 0; i < new_heights.length; i++) {
            //System.out.println(stack.toString());
            while (!stack.isEmpty() && new_heights[stack.peek()] > new_heights[i]) {
                int cur = stack.pop();
                res = Math.max(res, (i - stack.peek() - 1) * new_heights[cur]);
            }
            stack.push(i);
        }
        return res;  
    }
24.90集合2 出现重复元素
	回溯剪枝，也就是当前层级出现重复元素则跳过，而一个for循环就是一个层级
	在同一层中，第一次add无须考虑是否存在相同的值，但同一层中的后续add操作，如果添加相同的值，那么就是重复运算，这部分是可以去掉的。
	public List<List<Integer>> subsetsWithDup(int[] nums) {
		List<List<Integer>> ans = new ArrayList<>();
		Arrays.sort(nums); //排序
		getAns(nums, 0, new ArrayList<>(), ans);
		return ans;
	}

	private void getAns(int[] nums, int start, ArrayList<Integer> temp, List<List<Integer>> ans) {
		ans.add(new ArrayList<>(temp));
		for (int i = start; i < nums.length; i++) {
			//和上个数字相等就跳过
			if (i > start && nums[i] == nums[i - 1]) {
				continue;
			}
			temp.add(nums[i]);
			getAns(nums, i + 1, temp, ans);
			temp.remove(temp.size() - 1);
		}
	}
