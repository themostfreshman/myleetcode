1.找到最长的非重复子串，返回长度
	1.首先是暴力法
	public int lengthOfLongestSubstring(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，i++，然后后续循环的目的是找到重复的那个，这个点是可以优化的
		注意区间[i,j]这种思路，以及数据结构的应用
        int n = s.length();
        int i=0,j=0,ans=0;
        HashSet<Character> set = new HashSet<>();
        while(i<n && j<n){
            if(!set.contains(s.charAt(j))){
                //不包含,没有重复
                set.add(s.charAt(j++));
                ans = Math.max(ans,j-i);
            }else{
                //重复了
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
	2.优化上面的
	public int lengthOfLongestSubstrin1(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，需要跳到重复的位置，咋知道重复的位置呢，使用map去保存当前字符最后出现的位置。
        int n = s.length();
        int ans=0;
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0,j=0;j<n;j++){
            if(map.containsKey(s.charAt(j))){
                //包含,i跳到重复地方的后面
                i=Math.max(map.get(s.charAt(j)),i);
            }
            ans = Math.max(ans,j-i+1);
            map.put(s.charAt(j),j+1);
        }
        return ans;
    }
2.找到最长的回文子串
	1.暴力法 拿到所有长度大于二的子串，去判断是否满足条件，咋判断呢，左右指针
	public String longestPalindrome(String s) {
        int n = s.length();
        if(n<2){
            return s;
        }
        int maxLen = 1;
        String res = s.substring(0,1);
        for(int i =0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(j-i+1>maxLen && valid(s,i,j)){
                    maxLen = j-i+1;
                    res = s.substring(i,j+1);
                }
            }
        }
        return res;
    }

    private boolean valid(String s, int left, int right) {
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
	2.中心扩散法，对每个item从中心进行扩散，从而找到每个item的最长回文子串。
	中心扩散有两种情况，
	1.奇数，从i扩散即可，代码的表现形式为i与i进行判断 
	2.偶数，从缝隙扩散，在代码中的表现为i 与 i+1进行判断
	public static String longestPalindrome(String s) {
        int n = s.length();
        if(n<2){
            return s;
        }
        String res = s.substring(0,1);
        int maxLen = 1;
        for(int i=0;i<n-1;i++){
            String oddString = centerSpread(s,i,i);
            String evenString = centerSpread(s,i,i+1);
            String maxLenString = oddString.length()>evenString.length()?oddString:evenString;
            if(maxLenString.length()>maxLen){
                maxLen=maxLenString.length();
                res = maxLenString;
            }
        }
        return res;
    }

    private static String centerSpread(String s, int left, int right) {
        int len = s.length();
        int i = left;
        int j = right;
        while(i>=0 && j<len){
            if(s.charAt(i)==s.charAt(j)){
                i--;
                j++;
            }else{
                break;
            }
        }
		//这里注意跳出while的条件是s.charAt(i)!=s.charAt(j)因此子串并不包括i j
        return s.substring(i+1,j);
    }