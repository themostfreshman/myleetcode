1.找到最长的非重复子串，返回长度
	1.首先是暴力法
	public int lengthOfLongestSubstring(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，i++，然后后续循环的目的是找到重复的那个，这个点是可以优化的
		注意区间[i,j]这种思路，以及数据结构的应用
        int n = s.length();
        int i=0,j=0,ans=0;
        HashSet<Character> set = new HashSet<>();
        while(i<n && j<n){
            if(!set.contains(s.charAt(j))){
                //不包含,没有重复
                set.add(s.charAt(j++));
                ans = Math.max(ans,j-i);
            }else{
                //重复了
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
	2.优化上面的
	public int lengthOfLongestSubstrin1(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，需要跳到重复的位置，咋知道重复的位置呢，使用map去保存当前字符最后出现的位置。
        int n = s.length();
        int ans=0;
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0,j=0;j<n;j++){
            if(map.containsKey(s.charAt(j))){
                //包含,i跳到重复地方的后面
                i=Math.max(map.get(s.charAt(j)),i);
            }
            ans = Math.max(ans,j-i+1);
            map.put(s.charAt(j),j+1);
        }
        return ans;
    }