1.找到最长的非重复子串，返回长度
	1.首先是暴力法
	public int lengthOfLongestSubstring(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，i++，然后后续循环的目的是找到重复的那个，这个点是可以优化的
		注意区间[i,j]这种思路，以及数据结构的应用
        int n = s.length();
        int i=0,j=0,ans=0;
        HashSet<Character> set = new HashSet<>();
        while(i<n && j<n){
            if(!set.contains(s.charAt(j))){
                //不包含,没有重复
                set.add(s.charAt(j++));
                ans = Math.max(ans,j-i);
            }else{
                //重复了
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
	2.优化上面的
	public int lengthOfLongestSubstrin1(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，需要跳到重复的位置，咋知道重复的位置呢，使用map去保存当前字符最后出现的位置。
        int n = s.length();
        int ans=0;
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0,j=0;j<n;j++){
            if(map.containsKey(s.charAt(j))){
                //包含,i跳到重复地方的后面
                i=Math.max(map.get(s.charAt(j)),i);
            }
            ans = Math.max(ans,j-i+1);
            map.put(s.charAt(j),j+1);
        }
        return ans;
    }
2.找到最长的回文子串
	1.暴力法 拿到所有长度大于二的子串，去判断是否满足条件，咋判断呢，左右指针
	public String longestPalindrome(String s) {
        int n = s.length();
        if(n<2){
            return s;
        }
        int maxLen = 1;
        String res = s.substring(0,1);
        for(int i =0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(j-i+1>maxLen && valid(s,i,j)){
                    maxLen = j-i+1;
                    res = s.substring(i,j+1);
                }
            }
        }
        return res;
    }

    private boolean valid(String s, int left, int right) {
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
	2.中心扩散法，对每个item从中心进行扩散，从而找到每个item的最长回文子串。
		中心扩散有两种情况，
		1.奇数，从i扩散即可，代码的表现形式为i与i进行判断 
		2.偶数，从缝隙扩散，在代码中的表现为i 与 i+1进行判断
	public static String longestPalindrome(String s) {
        int n = s.length();
        if(n<2){
            return s;
        }
        String res = s.substring(0,1);
        int maxLen = 1;
        for(int i=0;i<n-1;i++){
            String oddString = centerSpread(s,i,i);
            String evenString = centerSpread(s,i,i+1);
            String maxLenString = oddString.length()>evenString.length()?oddString:evenString;
            if(maxLenString.length()>maxLen){
                maxLen=maxLenString.length();
                res = maxLenString;
            }
        }
        return res;
    }

    private static String centerSpread(String s, int left, int right) {
        int len = s.length();
        int i = left;
        int j = right;
        while(i>=0 && j<len){
            if(s.charAt(i)==s.charAt(j)){
                i--;
                j++;
            }else{
                break;
            }
        }
		//这里注意跳出while的条件是s.charAt(i)!=s.charAt(j)因此子串并不包括i j
        return s.substring(i+1,j);
    }
	3.动态规划
	//动态规划，dp[l][r]表明s[l][r]是不是回文子串。而s[l][r]是否是回文子串取决于s[l+1][r-1]的情况，而当s[l][r]去掉边界为单字符/空字符时，s[l][r]直接为回文子串
    //总结一下就是当r-1>l+1时，需要判断s[l+1][r-1]，也就是r-l>2,那么反过来r-l<=2时，就不需要判断直接为回文子串.
    //因此 if(s[l]==s[r] &&(r-1<=2 || dp[l+1][r-1]))这种情况下，s[l][r]为回文子串,or的顺序很重要，这样保证了dp的值在需要时不会为空，保证了动态规划的进行。
    public static String longestPalindrome(String s){
        int n = s.length();
        if(n<2){
            return s;
        }
        int maxLen = 1;
        String result = s.substring(0,1);
        boolean[][] dp = new boolean[n][n];
        //为嘛r从1开始呢，r从0开始不就是初始条件嘛
        for(int r=1;r<n;r++){
            for(int l=0;l<r;l++){
                if(s.charAt(l)==s.charAt(r) && (r-l<=2 || dp[l+1][r-1])){
                    dp[l][r] = true;
                    if(r-l+1>maxLen){
                        maxLen=r-l+1;
                        result = s.substring(l,r+1);
                    }
                }
            }
        }
        return result;
    }
	这里Boolean包装类就会报空指针异常。。。。也用不到判断这老哥啊，，boolean就没问题。。。。。。
	
3.z字形变换，按照题意写就是了
	public static String convert(String s, int numRows) {
        //使用loc down来表明当前字符放置在字符串数组的位置，loc==0 || loc=numRows时，down需要变化，而loc的++ -- 由down来决定，向下的化loc++，否则loc--，这样子
        int n = s.length();
        if(n<=numRows || numRows==1){
            return s;
        }
        String[] rows = new String[numRows];
        for(int i=0;i<numRows;i++) rows[i] = "";
        boolean down = false;
        int loc = 0;

        for(int i=0;i<n;i++){
            rows[loc] += s.substring(i,i+1);
            if(loc==0 || loc ==numRows-1){
                down = !down;
            }
            loc += down?+1:-1;
        }
        String result = "";
        for (String row : rows) {
            s+=row;
        }
        return result;
    }
4.9.字符串转换整数atoi
	    //1.找到起点，可能为数字，也可能为负号，负号的情况加个变量表示一下就好
        //2.找到终点，这个就找到不是数字的就行
        //3.遍历起点到终点，需要判断越界的情况
    public int myAtoi(String str) {
        int i = 0, j = 0, len = str.length();
        boolean negative = false;
        for (i = 0; i < len; i++) {
            if ('0' <= str.charAt(i) && str.charAt(i) <= '9') {
                break;
            } else if (str.charAt(i) == '-' || str.charAt(i) == '+') {
                negative = str.charAt(i) == '-';
                i++;
                break;
            } else if (str.charAt(i) != ' ') {
                return 0;
            }
        }
        for (j = i; j < len; j++) {
            if (str.charAt(j) < '0' || '9' < str.charAt(j)) {
                break;
            }
        }
        int ret = 0;
        String num = str.substring(i, j);
        for (int x = 0; x < num.length(); x++) {
            int cur = num.charAt(x) - '0';
            if (negative) {
                //这里判断溢出的情况和第7题一样 也就是2
                if (ret < Integer.MIN_VALUE / 10|| ret == Integer.MIN_VALUE / 10 && cur > 8) {
                    return Integer.MIN_VALUE;
                }
                ret = ret * 10 - cur;
            } else {
                if (ret > Integer.MAX_VALUE / 10 || ret == Integer.MAX_VALUE / 10 && cur > 7) {
                    return Integer.MAX_VALUE;
                }
                ret = ret * 10 + cur;
            }
        }
        return ret;
    }
5.10 正则匹配
	//递归，因为很明显存在子问题的情况，可以使用递归来解决。
	不断减小s/p的字符串长度，递归判断，核心就是判断a 和a*  / b和a*的情况。第一种s的a可以干掉，第二种a*可以干掉
	public static boolean isMatch1(String s,String p){
        //第一步，都为空返回true，一方为空，返回false
        if(p.isEmpty()) return s.isEmpty();
        //第二步, 判断首字母是否匹配，毕竟*号不可能出现在首位
        boolean first_match = (!s.isEmpty() && (s.charAt(0)==p.charAt(0) || p.charAt(0)=='.'));
        //第三步，如果pattern第二个就出现了*号，两种情况，第一种（因为*可以为0的，就判断去掉pattern的前两个字符，再进行比较）
        // 第二种（在第一个字符匹配的情况下，*号还是可以为0，干掉S的第一个字母即可）
        if(p.length()>=2 && p.charAt(1)=='*'){
            return (isMatch1(s,p.substring(2)) || (first_match && isMatch1(s.substring(1),p)));
        }else{
		    //第四步，pattern第二个字母不是*，大家就往前跨越一步再判断
            return first_match && isMatch1(s.substring(1),p.substring(1));
        }


    }
	//动态规划，使用缓存来优化速度，因为在上面的递推公式已经给出来了
	    public static boolean isMatch(String text, String pattern){
            //dp[i][j]表示  s后的t是否与j后的p匹配
            //基于最开始递归上的思想，使用缓存来优化
            //核心还是两种条件
            //为毛需要套一层呢，因为递推公式的是存在j+2的，问了保证j+2始终存在，我们在外面多进行了一层，代码简洁好多
            boolean[][] dp = new boolean[text.length()+1][pattern.length()+1];
            dp[text.length()][pattern.length()] = true;
            for(int i=text.length();i>=0;i--){
                for(int j=pattern.length()-1;j>=0;j--){
                    boolean firstMatch = (i<text.length() && (text.charAt(i)==pattern.charAt(j) || pattern.charAt(j)=='.'));
                    if(j+1< pattern.length() && pattern.charAt(j+1)=='*'){
                        dp[i][j] = dp[i][j+2] || firstMatch && dp[i+1][j];
                    }else{
                        dp[i][j] = firstMatch && dp[i+1][j+1];
                    }
                }
            }
            return dp[0][0];
        }
6.14 最长公共前缀
    1.逐位判断	
    public static String longestCommonPrefix1(String[] strs) {
        //1.判断strs为空的情况
        if(strs==null && strs.length==0) return "";
        //外层循环遍历字符，内层循环遍历数组
        for(int i=0;i<strs[0].length();i++){
            char c = strs[0].charAt(i);
            for (String str:strs
                 ) {
                //判断跳出  1.字符个数=当前字符串的长度  2.当前字符不同
                if(i==str.length() || c!=str.charAt(i)){
                    return strs[0].substring(0,i);
                }
            }
        }
        return strs[0];
    }
    2.水平扫描
    水平扫描lcp（s1...sn）=lcp(lcp(s1,s2),s3）使用indexof来判断，subtring来减少前缀，前缀为空则退出
    public  static String longestCommonPrefix2(String[] strs){
        if (strs.length == 0) return "";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++)
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return "";
            }
        return prefix;
    }
	
7.20 有效括号判断  标准的栈解法，使用map来简化代码
		// Hash table that takes care of the mappings.
        private HashMap<Character, Character> mappings;

        // Initialize hash map with mappings. This simply makes the code easier to read.
        public  Solution() {
            this.mappings = new HashMap<Character, Character>();
            this.mappings.put(')', '(');
            this.mappings.put('}', '{');
            this.mappings.put(']', '[');
        }

        public boolean isValid(String s) {
            if(s.length()%2!=0)  return false;

            // Initialize a stack to be used in the algorithm.
            Stack<Character> stack = new Stack<Character>();

            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);

                // If the current character is a closing bracket.
                if (this.mappings.containsKey(c)) {

                    // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
                    char topElement = stack.empty() ? '#' : stack.pop();

                    // If the mapping for this bracket doesn't match the stack's top element, return false.
                    if (topElement != this.mappings.get(c)) {
                        return false;
                    }
                } else {
                    // If it was an opening bracket, push to the stack.
                    stack.push(c);
                }
            }

            // If the stack still contains elements, then it is an invalid expression.
            return stack.isEmpty();
        }