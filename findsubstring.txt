1.找到最长的非重复子串，返回长度
	1.首先是暴力法
	public int lengthOfLongestSubstring(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，i++，然后后续循环的目的是找到重复的那个，这个点是可以优化的
		注意区间[i,j]这种思路，以及数据结构的应用
        int n = s.length();
        int i=0,j=0,ans=0;
        HashSet<Character> set = new HashSet<>();
        while(i<n && j<n){
            if(!set.contains(s.charAt(j))){
                //不包含,没有重复
                set.add(s.charAt(j++));
                ans = Math.max(ans,j-i);
            }else{
                //重复了
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
	2.优化上面的
	public int lengthOfLongestSubstrin1(String s) {
        //遍历字符串，以当前元素为key，计算最长非重复子串，当出现重复时，需要跳到重复的位置，咋知道重复的位置呢，使用map去保存当前字符最后出现的位置。
        int n = s.length();
        int ans=0;
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0,j=0;j<n;j++){
            if(map.containsKey(s.charAt(j))){
                //包含,i跳到重复地方的后面
                i=Math.max(map.get(s.charAt(j)),i);
            }
            ans = Math.max(ans,j-i+1);
            map.put(s.charAt(j),j+1);
        }
        return ans;
    }
2.找到最长的回文子串
	1.暴力法 拿到所有长度大于二的子串，去判断是否满足条件，咋判断呢，左右指针
	public String longestPalindrome(String s) {
        int n = s.length();
        if(n<2){
            return s;
        }
        int maxLen = 1;
        String res = s.substring(0,1);
        for(int i =0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(j-i+1>maxLen && valid(s,i,j)){
                    maxLen = j-i+1;
                    res = s.substring(i,j+1);
                }
            }
        }
        return res;
    }

    private boolean valid(String s, int left, int right) {
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
	2.中心扩散法，对每个item从中心进行扩散，从而找到每个item的最长回文子串。
		中心扩散有两种情况，
		1.奇数，从i扩散即可，代码的表现形式为i与i进行判断 
		2.偶数，从缝隙扩散，在代码中的表现为i 与 i+1进行判断
	public static String longestPalindrome(String s) {
        int n = s.length();
        if(n<2){
            return s;
        }
        String res = s.substring(0,1);
        int maxLen = 1;
        for(int i=0;i<n-1;i++){
            String oddString = centerSpread(s,i,i);
            String evenString = centerSpread(s,i,i+1);
            String maxLenString = oddString.length()>evenString.length()?oddString:evenString;
            if(maxLenString.length()>maxLen){
                maxLen=maxLenString.length();
                res = maxLenString;
            }
        }
        return res;
    }

    private static String centerSpread(String s, int left, int right) {
        int len = s.length();
        int i = left;
        int j = right;
        while(i>=0 && j<len){
            if(s.charAt(i)==s.charAt(j)){
                i--;
                j++;
            }else{
                break;
            }
        }
		//这里注意跳出while的条件是s.charAt(i)!=s.charAt(j)因此子串并不包括i j
        return s.substring(i+1,j);
    }
	3.动态规划
	//动态规划，dp[l][r]表明s[l][r]是不是回文子串。而s[l][r]是否是回文子串取决于s[l+1][r-1]的情况，而当s[l][r]去掉边界为单字符/空字符时，s[l][r]直接为回文子串
    //总结一下就是当r-1>l+1时，需要判断s[l+1][r-1]，也就是r-l>2,那么反过来r-l<=2时，就不需要判断直接为回文子串.
    //因此 if(s[l]==s[r] &&(r-1<=2 || dp[l+1][r-1]))这种情况下，s[l][r]为回文子串,or的顺序很重要，这样保证了dp的值在需要时不会为空，保证了动态规划的进行。
    public static String longestPalindrome(String s){
        int n = s.length();
        if(n<2){
            return s;
        }
        int maxLen = 1;
        String result = s.substring(0,1);
        boolean[][] dp = new boolean[n][n];
        //为嘛r从1开始呢，r从0开始不就是初始条件嘛
        for(int r=1;r<n;r++){
            for(int l=0;l<r;l++){
                if(s.charAt(l)==s.charAt(r) && (r-l<=2 || dp[l+1][r-1])){
                    dp[l][r] = true;
                    if(r-l+1>maxLen){
                        maxLen=r-l+1;
                        result = s.substring(l,r+1);
                    }
                }
            }
        }
        return result;
    }
	这里Boolean包装类就会报空指针异常。。。。也用不到判断这老哥啊，，boolean就没问题。。。。。。
	
3.z字形变换，按照题意写就是了
	public static String convert(String s, int numRows) {
        //使用loc down来表明当前字符放置在字符串数组的位置，loc==0 || loc=numRows时，down需要变化，而loc的++ -- 由down来决定，向下的化loc++，否则loc--，这样子
        int n = s.length();
        if(n<=numRows || numRows==1){
            return s;
        }
        String[] rows = new String[numRows];
        for(int i=0;i<numRows;i++) rows[i] = "";
        boolean down = false;
        int loc = 0;

        for(int i=0;i<n;i++){
            rows[loc] += s.substring(i,i+1);
            if(loc==0 || loc ==numRows-1){
                down = !down;
            }
            loc += down?+1:-1;
        }
        String result = "";
        for (String row : rows) {
            s+=row;
        }
        return result;
    }
4.9.字符串转换整数atoi
	    //1.找到起点，可能为数字，也可能为负号，负号的情况加个变量表示一下就好
        //2.找到终点，这个就找到不是数字的就行
        //3.遍历起点到终点，需要判断越界的情况
    public int myAtoi(String str) {
        int i = 0, j = 0, len = str.length();
        boolean negative = false;
        for (i = 0; i < len; i++) {
            if ('0' <= str.charAt(i) && str.charAt(i) <= '9') {
                break;
            } else if (str.charAt(i) == '-' || str.charAt(i) == '+') {
                negative = str.charAt(i) == '-';
                i++;
                break;
            } else if (str.charAt(i) != ' ') {
                return 0;
            }
        }
        for (j = i; j < len; j++) {
            if (str.charAt(j) < '0' || '9' < str.charAt(j)) {
                break;
            }
        }
        int ret = 0;
        String num = str.substring(i, j);
        for (int x = 0; x < num.length(); x++) {
            int cur = num.charAt(x) - '0';
            if (negative) {
                //这里判断溢出的情况和第7题一样 也就是2
                if (ret < Integer.MIN_VALUE / 10|| ret == Integer.MIN_VALUE / 10 && cur > 8) {
                    return Integer.MIN_VALUE;
                }
                ret = ret * 10 - cur;
            } else {
                if (ret > Integer.MAX_VALUE / 10 || ret == Integer.MAX_VALUE / 10 && cur > 7) {
                    return Integer.MAX_VALUE;
                }
                ret = ret * 10 + cur;
            }
        }
        return ret;
    }
5.10 正则匹配
	//递归，因为很明显存在子问题的情况，可以使用递归来解决。
	不断减小s/p的字符串长度，递归判断，核心就是判断a 和a*  / b和a*的情况。第一种s的a可以干掉，第二种a*可以干掉
	public static boolean isMatch1(String s,String p){
        //第一步，都为空返回true，一方为空，返回false
        if(p.isEmpty()) return s.isEmpty();
        //第二步, 判断首字母是否匹配，毕竟*号不可能出现在首位
        boolean first_match = (!s.isEmpty() && (s.charAt(0)==p.charAt(0) || p.charAt(0)=='.'));
        //第三步，如果pattern第二个就出现了*号，两种情况，第一种（因为*可以为0的，就判断去掉pattern的前两个字符，再进行比较）
        // 第二种（在第一个字符匹配的情况下，*号还是可以为0，干掉S的第一个字母即可）
        if(p.length()>=2 && p.charAt(1)=='*'){
            return (isMatch1(s,p.substring(2)) || (first_match && isMatch1(s.substring(1),p)));
        }else{
		    //第四步，pattern第二个字母不是*，大家就往前跨越一步再判断
            return first_match && isMatch1(s.substring(1),p.substring(1));
        }


    }
	//动态规划，使用缓存来优化速度，因为在上面的递推公式已经给出来了
	    public static boolean isMatch(String text, String pattern){
            //dp[i][j]表示  s后的t是否与j后的p匹配
            //基于最开始递归上的思想，使用缓存来优化
            //核心还是两种条件
            //为毛需要套一层呢，因为递推公式的是存在j+2的，为了保证j+2始终存在，我们在外面多进行了一层，代码简洁好多
            boolean[][] dp = new boolean[text.length()+1][pattern.length()+1];
            dp[text.length()][pattern.length()] = true;
            for(int i=text.length();i>=0;i--){
                for(int j=pattern.length()-1;j>=0;j--){
                    boolean firstMatch = (i<text.length() && (text.charAt(i)==pattern.charAt(j) || pattern.charAt(j)=='.'));
                    if(j+1< pattern.length() && pattern.charAt(j+1)=='*'){
                        dp[i][j] = dp[i][j+2] || firstMatch && dp[i+1][j];
                    }else{
                        dp[i][j] = firstMatch && dp[i+1][j+1];
                    }
                }
            }
            return dp[0][0];
        }
6.14 最长公共前缀
    1.逐位判断	
    public static String longestCommonPrefix1(String[] strs) {
        //1.判断strs为空的情况
        if(strs==null && strs.length==0) return "";
        //外层循环遍历字符，内层循环遍历数组
        for(int i=0;i<strs[0].length();i++){
            char c = strs[0].charAt(i);
            for (String str:strs
                 ) {
                //判断跳出  1.字符个数=当前字符串的长度  2.当前字符不同
                if(i==str.length() || c!=str.charAt(i)){
                    return strs[0].substring(0,i);
                }
            }
        }
        return strs[0];
    }
    2.水平扫描
    水平扫描lcp（s1...sn）=lcp(lcp(s1,s2),s3）使用indexof来判断，subtring来减少前缀，前缀为空则退出
    public  static String longestCommonPrefix2(String[] strs){
        if (strs.length == 0) return "";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++)
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return "";
            }
        return prefix;
    }
	
7.20 有效括号判断  标准的栈解法，使用map来简化代码
		// Hash table that takes care of the mappings.
        private HashMap<Character, Character> mappings;

        // Initialize hash map with mappings. This simply makes the code easier to read.
        public  Solution() {
            this.mappings = new HashMap<Character, Character>();
            this.mappings.put(')', '(');
            this.mappings.put('}', '{');
            this.mappings.put(']', '[');
        }

        public boolean isValid(String s) {
            if(s.length()%2!=0)  return false;

            // Initialize a stack to be used in the algorithm.
            Stack<Character> stack = new Stack<Character>();

            for (int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);

                // If the current character is a closing bracket.
                if (this.mappings.containsKey(c)) {

                    // Get the top element of the stack. If the stack is empty, set a dummy value of '#'
                    char topElement = stack.empty() ? '#' : stack.pop();

                    // If the mapping for this bracket doesn't match the stack's top element, return false.
                    if (topElement != this.mappings.get(c)) {
                        return false;
                    }
                } else {
                    // If it was an opening bracket, push to the stack.
                    stack.push(c);
                }
            }

            // If the stack still contains elements, then it is an invalid expression.
            return stack.isEmpty();
        }
		
8.28 实现strStr()
	字符串匹配吧  indexof的实现
	//笨办法 ，找到第一个匹配的字符，然后判断
	public static int strStr(String haystack, String needle) {
        if(needle.equals("")){
            return 0;
        }
        if(haystack.length()<needle.length()){
            return -1;
        }
        //将两个字符串转化为数组，遍历目标数组
        char[] target = haystack.toCharArray();
        char[] model = needle.toCharArray();
        int i=0;
        boolean flag =true;
        while(i!=target.length){
            //找到每一个字符判断后面是不是一样的
            while(i!=target.length && target[i]!=model[0]){
                i++;
            }
            if(target.length - i <needle.length()){
                return -1;
            }
            if(i==target.length){
                return -1;
            }
            for(int k=1;k<model.length;k++){
                if(target[i+k]!=model[k]){
                    flag=false;
                    break;
                }
            }
            if(flag == true){
                break;
            }else{
                i++;
                flag =true;
            }
        }
        return i;
    }
	//kmp   X，它永远比当前状态 j 落后一个状态，拥有和 j 最长的相同前缀，我们给它起了个名字叫「影子状态」
	private int[][] dp;
    private String pat;

	public KMP(String pat) {
        this.pat = pat;
        int M = pat.length();
        // dp[状态][字符] = 下个状态
        dp = new int[M][256];
        // base case
        dp[0][pat.charAt(0)] = 1;
        // 影子状态 X 初始为 0
        int X = 0;
        // 当前状态 j 从 1 开始
        for (int j = 1; j < M; j++) {
            for (int c = 0; c < 256; c++) {
                if (pat.charAt(j) == c) 
                    dp[j][c] = j + 1;
                else 
                    dp[j][c] = dp[X][c];
            }
            // 更新影子状态
            X = dp[X][pat.charAt(j)];
        }
    }


    public int search(String txt) {
        int M = pat.length();
        int N = txt.length();
        // pat 的初始态为 0
        int j = 0;
        for (int i = 0; i < N; i++) {
            // 计算 pat 的下一个状态
            j = dp[j][txt.charAt(i)];
            // 到达终止态，返回结果
            if (j == M) return i - M + 1;
        }
        // 没到达终止态，匹配失败
        return -1;
    }
9.30串联所有字串
    //使用hashmap来存储word的数量，保证不会超量
	public List<Integer> findSubstring(String s, String[] words) {
		List<Integer> res = new ArrayList<Integer>();
		int wordNum = words.length;
		if (wordNum == 0) {
			return res;
		}
		int wordLen = words[0].length();
		//HashMap1 存所有单词
		HashMap<String, Integer> allWords = new HashMap<String, Integer>();
		for (String w : words) {
			int value = allWords.getOrDefault(w, 0);
			allWords.put(w, value + 1);
		}
		//遍历所有子串
		for (int i = 0; i < s.length() - wordNum * wordLen + 1; i++) {
			//HashMap2 存当前扫描的字符串含有的单词
			HashMap<String, Integer> hasWords = new HashMap<String, Integer>();
			int num = 0;
			//判断该子串是否符合
			while (num < wordNum) {
				String word = s.substring(i + num * wordLen, i + (num + 1) * wordLen);
				//判断该单词在 HashMap1 中
				if (allWords.containsKey(word)) {
					int value = hasWords.getOrDefault(word, 0);
					hasWords.put(word, value + 1);
					//判断当前单词的 value 和 HashMap1 中该单词的 value
					if (hasWords.get(word) > allWords.get(word)) {
						break;
					}
				} else {
					break;
				}
				num++;
			}
			//判断是不是所有的单词都符合条件
			if (num == wordNum) {
				res.add(i);
			}
		}
	return res;
}
10.32最长有效括弧
	暴力法：1.拿到所有的非空偶数的子串，然后判定该子串是否有效，然后保存最大子串长度。。。超时
	public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push('(');
            } else if (!stack.empty() && stack.peek() == '(') {
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.empty();
    }
    public int longestValidParentheses(String s) {
        int maxlen = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 2; j <= s.length(); j+=2) {
                if (isValid(s.substring(i, j))) {
                    maxlen = Math.max(maxlen, j - i);
                }
            }
        }
        return maxlen;
    }
	动态规划 规定dp[i]保存以i为结尾的子串的最长有效长度，初始化为0 ，以 （ 结尾跳过，一定为0，以）为结尾有两种情况
			 1.s[i-1]为（ 则dp[i]=dp[i-2]+2  ()的情况
			 2.s[i-1]为 ）则如果 s[i-dp[i-1]-1]==(        (())的情况，那么dp[i]=dp[i-1]+dp[i-dp[i-1]-2]+2  nb
	public int longestValidParentheses(String s) {
        int maxans = 0;
        int dp[] = new int[s.length()];
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == ')') {
                if (s.charAt(i - 1) == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                maxans = Math.max(maxans, dp[i]);
            }
        }
        return maxans;
    }
11.42 字符串相乘
    1.竖乘法  emmm注解很清晰
	    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        // 保存计算结果
        String res = "0";
        
        // num2 逐位与 num1 相乘
        for (int i = num2.length() - 1; i >= 0; i--) {
            int carry = 0;
            // 保存 num2 第i位数字与 num1 相乘的结果
            StringBuilder temp = new StringBuilder();
            // 补 0 
            for (int j = 0; j < num2.length() - 1 - i; j++) {
                temp.append(0);
            }
            int n2 = num2.charAt(i) - '0';
            
            // num2 的第 i 位数字 n2 与 num1 相乘
            for (int j = num1.length() - 1; j >= 0 || carry != 0; j--) {
                int n1 = j < 0 ? 0 : num1.charAt(j) - '0';
                int product = (n1 * n2 + carry) % 10;
                temp.append(product);
                carry = (n1 * n2 + carry) / 10;
            }
            // 将当前结果与新计算的结果求和作为新的结果
            res = addStrings(res, temp.reverse().toString());
        }
        return res;
    }

    /**
     * 对两个字符串数字进行相加，返回字符串形式的和
     */
    public String addStrings(String num1, String num2) {
        StringBuilder builder = new StringBuilder();
        int carry = 0;
        for (int i = num1.length() - 1, j = num2.length() - 1;
             i >= 0 || j >= 0 || carry != 0;
             i--, j--) {
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            int sum = (x + y + carry) % 10;
            builder.append(sum);
            carry = (x + y + carry) / 10;
        }
        return builder.reverse().toString();
    }
	2.优化，很大一部分的消耗在于两个字符串相加，我们不使用字符串相加去获得结果，而是直接根据各位相乘的temp在结果中的位置来进行相加
	    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        int[] res = new int[num1.length() + num2.length()];
        for (int i = num1.length() - 1; i >= 0; i--) {
            int n1 = num1.charAt(i) - '0';
            for (int j = num2.length() - 1; j >= 0; j--) {
                int n2 = num2.charAt(j) - '0';
                int sum = (res[i + j + 1] + n1 * n2);
                res[i + j + 1] = sum % 10;
                res[i + j] += sum / 10;
            }
        }

        StringBuilder result = new StringBuilder();
        for (int i = 0; i < res.length; i++) {
            if (i == 0 && res[i] == 0) continue;
            result.append(res[i]);
        }
        return result.toString();
    }
	1 2 3
	  4 5
	  1 5
	1 0
	一次类推 
	
12.49字母异位词分组
	1.最直观的想法，遍历数组，判断与当前字符串相同的element，分组，使用used[]来简化判断，两字符串是否相等，可以使用map来保存字符出现的个数来判断，不过好慢
	class Solution {
		public List<List<String>> groupAnagrams(String[] strs) {
			List<List<String>> ans = new ArrayList<>();
			boolean[] used = new boolean[strs.length];
			for (int i = 0; i < strs.length; i++) {
				List<String> temp = null;
				if (!used[i]) {
					temp = new ArrayList<String>();
					temp.add(strs[i]);
					//两两比较判断字符串是否符合
					for (int j = i + 1; j < strs.length; j++) {
						if(!used[j]){
							if (equals(strs[i], strs[j])) {
							used[j] = true;
							temp.add(strs[j]);
							}
						}

					}
				}
				if (temp != null) {
					ans.add(temp);

				}
			}
			return ans;

		}
		private boolean equals(String string1, String string2) {
			Map<Character, Integer> hash = new HashMap<>();
			//记录第一个字符串每个字符出现的次数，进行累加
			for (int i = 0; i < string1.length(); i++) {
				if (hash.containsKey(string1.charAt(i))) {
					hash.put(string1.charAt(i), hash.get(string1.charAt(i)) + 1);
				} else {
					hash.put(string1.charAt(i), 1);
				}
			}
			 //记录第一个字符串每个字符出现的次数，将之前的每次减 1
			for (int i = 0; i < string2.length(); i++) {
				if (hash.containsKey(string2.charAt(i))) {
					hash.put(string2.charAt(i), hash.get(string2.charAt(i)) - 1);
				} else {
					return false;
				}
			}
			//判断每个字符的次数是不是 0 ，不是的话直接返回 false
			Set<Character> set = hash.keySet();
			for (char c : set) {
				if (hash.get(c) != 0) {
					return false;
				}
			}
			return true;
		}
	}
	2.只要将一组字符串映射到同一位置即可，那就按字典序排序
	public List<List<String>> groupAnagrams(String[] strs) {
		HashMap<String, List<String>> hash = new HashMap<>();
		for (int i = 0; i < strs.length; i++) {
			char[] s_arr = strs[i].toCharArray();
			//排序
			Arrays.sort(s_arr);
			//映射到 key
			String key = String.valueOf(s_arr); 
			//添加到对应的类中
			if (hash.containsKey(key)) {
				hash.get(key).add(strs[i]);
			} else {
				List<String> temp = new ArrayList<String>();
				temp.add(strs[i]);
				hash.put(key, temp);
			}

		}
		return new ArrayList<List<String>>(hash.values()); 
	}
	3.还是映射的问题，利用算术基本定理，一个非质数可以唯一的分解为质因子的乘积，将每个字符映射到一个质因子，然后相乘，结果一致则说明相同
	public List<List<String>> groupAnagrams(String[] strs) {
		HashMap<Integer, List<String>> hash = new HashMap<>();
		//每个字母对应一个质数
		int[] prime = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103 };
		for (int i = 0; i < strs.length; i++) {
			int key = 1;
			//累乘得到 key
			for (int j = 0; j < strs[i].length(); j++) {
				key *= prime[strs[i].charAt(j) - 'a'];
			} 
			if (hash.containsKey(key)) {
				hash.get(key).add(strs[i]);
			} else {
				List<String> temp = new ArrayList<String>();
				temp.add(strs[i]);
				hash.put(key, temp);
			}

		}
		return new ArrayList<List<String>>(hash.values());
}
13.44通配符匹配
    //双指针法，3种情况，s p 匹配 前进   p为*，先把*当空串看，记录*的位置，以及s的位置，并用match来记录*匹配了几个字符，当s遍历完毕后，看看p是否到达了末尾，是的话匹配
    boolean isMatch(String str, String pattern) {
        int s=0,p=0,startIdx=-1,match=0;
        while(s<str.length()){
            //匹配
            if(p<pattern.length() && (str.charAt(s)==pattern.charAt(p) || pattern.charAt(p) == '?')){
                s++;
                p++;
            }else if(p<pattern.length() && pattern.charAt(p) == '*'){
                //碰到*，先当空串处理，后续匹配不先去了进行回溯，咋回溯呢，记录下当前的位置
                startIdx = p;
                match = s;
                p++;
            }else if(startIdx!=-1){
                //碰到不匹配了，然后前面有*，回溯,咋回溯呢，p回溯到*的后一个，而s回溯到match的后一个，此时说明，*匹配了一个字符。
                p = startIdx+1;
                match++;
                s = match;
            }else{
                return false;
            }
        }
        //当s跳出时，如果p后面全是*，那么全跳过
        while(p<pattern.length() && pattern.charAt(p)=='*'){
            p++;
        }
        //判断p是否到达了末尾，是的话，匹配
        return p == pattern.length();
    }
    //动态规划，倒着来还是顺着来其实是看我们观察得到的递推公式是怎么样的，而dp的规模取决于我们递推公式会 参考+多少的问题
    boolean isMatch2(String str, String pattern){
        boolean[][] dp = new boolean[str.length() + 1][pattern.length() + 1];
        dp[str.length()][pattern.length()] = true;
        for(int i=str.length();i>=0;i++){
            for(int j = pattern.length();j>=0;j++){
                if(i==str.length() && j==pattern.length()){
                    continue;
                }
                boolean firstMatch = (i<str.length() && j<pattern.length()) &&(str.charAt(i) == pattern.charAt(j) || pattern.charAt(j)=='?'||pattern.charAt(j)=='i');
                if(j<pattern.length() && pattern.charAt(j)=='*'){
                    dp[i][j] = dp[i][j+1] || (firstMatch && dp[i+1][j]);
                }else{
                    dp[i][j] = firstMatch && dp[i+1][j+1];
                }
            }
        }
        return dp[0][0];
    }